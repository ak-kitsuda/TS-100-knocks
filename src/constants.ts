import type { Quiz } from 'src/types/Quiz';

export const QUIZ_NUM: number = 100;

export const TS_QUIZ_LIST: Quiz[] = [
  {
    id: 1,
    questionCode: [],
    questionText: 'プリミティブ型は以下のうちどれか',
    options: { a: 'Number', b: '{}', c: 'Array', d: 'undefined' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/values-types-variables/primitive-types',
  },
  {
    id: 2,
    questionCode: [],
    questionText: '変数宣言において、letとconstはそれぞれ再代入できるか？',
    options: {
      a: 'let: できる, const: できる',
      b: 'let: できる, const: できない',
      c: 'let: できない, const: できる',
      d: 'let: できない, const: できない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/let-and-const',
  },
  {
    id: 3,
    questionCode: ['const num : ○○= 123456789;'],
    questionText: '変数numを整数のみ代入できるように型注釈せよ',
    options: { a: 'any', b: 'number', c: 'string', d: 'bigint' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/bigint',
  },
  {
    id: 4,
    questionCode: [],
    questionText: '使うべきでない変数宣言はどれか',
    options: { a: 'var', b: 'let', c: 'const' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/vars-problems',
  },
  {
    id: 5,
    questionCode: ['let x = 1;', 'x = "hello";'],
    questionText: 'このコードにおいて、どのようなエラーが起きるか',
    options: {
      a: '変数宣言がlet',
      b: 'xがstring型ではない',
      c: 'シングルクォーテーションを使うべき',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/type-inference',
  },
  {
    id: 6,
    questionCode: ['let x = 1;', 'x = "hello";', 'console.log(x.substring(1,3));'],
    questionText: 'Javascriptでこのコードはエラーが起こるか',
    options: { a: '起こる', b: '起こらない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/difference-between-type-inference-and-dynamic-typing',
  },
  {
    id: 7,
    questionCode: [],
    questionText: 'number型の宣言において、エラーにならないのはどれか',
    options: { a: '_100', b: '100_000_000', c: '100_', d: '100._0' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number',
  },
  {
    id: 8,
    questionCode: [],
    questionText: 'number型の宣言において、エラーになるのはどれか',
    options: { a: '123', b: '-123', c: '.123', d: '123._0' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number',
  },
  {
    id: 9,
    questionCode: ['const price = parseInt("百円");', 'console.log(price);'],
    questionText: 'Javascriptにおける出力結果は？',
    options: { a: 'false', b: 'NaN', c: 'null', d: '百円' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number',
  },
  {
    id: 10,
    questionCode: ['NaN == NaN;'],
    questionText: 'Javascriptにおいて、この条件式の結果は？',
    options: { a: 'True', b: 'False' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number',
  },
  {
    id: 11,
    questionCode: ['0.1 + 0.2 === 0.3'],
    questionText: 'Javascriptにおいて、この条件式の結果は？',
    options: { a: 'True', b: 'False' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number/decimal-calculation-error',
  },
  {
    id: 12,
    questionCode: ['0.5 + 0.25 === 0.75'],
    questionText: 'JavaScriptにおいて、この条件式の結果は？',
    options: { a: 'True', b: 'False' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/number/decimal-calculation-error',
  },
  {
    id: 13,
    questionCode: ['const count = 10;', 'console.log(`現在、○○名が見ています。`);'],
    questionText: '変数を文字列に埋め込むにはどうすればいいか？',
    options: { a: '${count}', b: 'count', c: '$count', d: '{{count}}' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/string',
  },
  {
    id: 14,
    questionCode: [],
    questionText: 'nullとundefinedの説明で正しいのは？',
    options: {
      a: 'nullは値がないことを示し、undefinedは変数に値が未定義なことを示す',
      b: 'undefinedは値がないことを示し、nullは変数に値が未定義なことを示す',
      c: 'nullとundefinedは同義である',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/undefined',
  },
  {
    id: 15,
    questionCode: [],
    questionText: '意図的に不明な値を宣言したいときに使うプリミティブな型は？',
    options: { a: 'undefined', b: 'null', c: 'symbol', d: '{}' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/undefined',
  },
  {
    id: 16,
    questionCode: ['const obj = {};', 'console.log(obj.name);'],
    questionText: '出力結果は？',
    options: { a: 'null', b: 'name', c: 'undefined', d: '{}' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/undefined',
  },
  {
    id: 17,
    questionCode: [
      "const s1 = Symbol('foo');",
      "const s2 = Symbol('foo');",
      'console.log(s1 === s2);',
    ],
    questionText: '出力結果は？',
    options: { a: 'True', b: 'False' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/symbol',
  },
  {
    id: 18,
    questionCode: [],
    questionText: 'bigint型の宣言方法で正しいのは？',
    options: {
      a: 'const x: bigint = 100;',
      b: 'const x: bigint = 100n;',
      c: 'const x: BigInt = 100;',
      d: 'const x: bigInt = 100n;',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/bigint',
  },
  {
    id: 19,
    questionCode: ["const str: string = 'abc';", 'console.log(str.toUpperCase());'],
    questionText:
      'プリミティブ型である変数strにStringオブジェクトの関数を使っているが、このコードにはどのような問題があるか',
    options: {
      a: 'プリミティブ型にオブジェクトの関数は使えないのでエラーになる',
      b: 'const strObject = new String(str); のような記述がstrの宣言後に必ず必要',
      c: '問題なし',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/boxing',
  },
  {
    id: 20,
    questionCode: ["console.log('1' - 1);"],
    questionText: 'TypeScriptでは実行結果はどうなるか',
    options: { a: 'エラー', b: '11', c: '0', d: 'null' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/type-coercion',
  },
  {
    id: 21,
    questionCode: [],
    questionText: '整数の中でも1と2と3のみに値を限定したい場合はどう変数宣言をすればいいか',
    options: {
      a: 'let num: 1 | 2 | 3 = 1;',
      b: 'let num: number = 1, 2, 3;',
      c: 'let num: 1, 2, 3 = 1;',
      d: 'let num: number = 1 || 2 || 3;',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/literal-types',
  },
  {
    id: 22,
    questionCode: ['const x: Number = 0;', 'const y: number = x;'],
    questionText: 'TypeScriptにおいて、このコードではエラーが起きるか？',
    options: { a: 'エラーが起きる', b: 'エラーが起きない' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/boxing',
  },
  {
    id: 23,
    questionCode: [
      'const x1: unknown = 10;',
      'const x2: any = 10;',
      'const int1: number = x1;',
      'const int2: number = x2;',
    ],
    questionText: 'エラーが起きるのはどの変数を宣言した行か？',
    options: { a: 'x1', b: 'x2', c: 'int1', d: 'int2' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/statements/any-vs-unknown',
  },
  {
    id: 24,
    questionCode: [
      'const object1 = { value: 123 };',
      'const object2 = { value: 123 };',
      'console.log(object1 == object2);',
    ],
    questionText: 'どちらが出力されるか？',
    options: { a: 'true', b: 'false' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/non-primitives-are-objects',
  },
  {
    id: 25,
    questionCode: ["const str = 'a';", 'const num = str as unknown as number;'],
    questionText: '変数numを宣言時にエラーが起きるか？',
    options: { a: 'エラーが起きる', b: 'エラーが起きない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/unknown',
  },
  {
    id: 26,
    questionCode: [
      'const product = {',
      "  name: 'ミネラルウォーター',",
      '  price: 100,',
      '  getTaxIncludedPrice: function () {',
      '    return Math.floor(this.price * 1.1);',
      '  },',
      "  shomikigen: new Date('2022-01-20'),",
    ],
    questionText:
      'productオブジェクト内にある、getTaxIncludedPriceメソッドを実行したい。どのように記述すればいいか？',
    options: {
      a: 'getTaxIncludedPrice()',
      b: 'product.getTaxIncludedPrice()',
      c: 'product.getTaxIncludedPrice',
      d: 'product.getTaxIncludedPrice.function()',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/properties-of-objects',
  },
  {
    id: 27,
    questionCode: ["const obj = { name: 'dog' }", "obj.name = 'cat';"],
    questionText: '2行目でエラーが起きますか？',
    options: { a: 'エラーが起きる', b: 'エラーが起きない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/properties-of-objects',
  },
  {
    id: 28,
    questionCode: ['let person: { name: string; age: number };', "person = { name: 'Alice' };"],
    questionText: 'このコードでエラーが起こる理由を選択せよ',
    options: {
      a: 'name プロパティが number であるべきだから',
      b: 'age プロパティが不足しているから',
      c: 'person には代入できない型が使われているから',
      d: 'person の型定義が間違っているから',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/type-annotation-of-objects',
  },
  {
    id: 29,
    questionCode: ['const obj: { foo: number } = { foo: 1 };', 'obj.foo = 2;'],
    questionText: '変数objを読み取り専用にするにはどうすればいいか？',
    options: {
      a: 'const obj: { readonly foo: number; };',
      b: 'const obj: readonly { foo: number; };',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/readonly-property',
  },
  {
    id: 30,
    questionCode: [
      'type Size = {',
      '  width?: number;',
      '  height: number;',
      '};',
      'const size: Size = { height: 10 };',
    ],
    questionText: 'このコードでエラーは起きるか？',
    options: { a: 'エラーが起きる', b: 'エラーが起きない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/optional-property',
  },
  {
    id: 31,
    questionCode: ['let onlyX: { x: number };', 'onlyX = { x: 1 };', 'onlyX = { x: 1, y: 2 };'],
    questionText: 'このコードでエラーは起きるか？',
    options: { a: 'エラーが起きる', b: 'エラーが起きない' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/excess-property-checking',
  },
  {
    id: 32,
    questionCode: [
      'const xy: { x: number; y: number } = { x: 1, y: 2 };',
      'let onlyX: { x: number };',
      'onlyX = xy;',
    ],
    questionText: 'このコードでエラーは起きるか？',
    options: { a: '起きる', b: '起きない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/excess-property-checking',
  },
  {
    id: 33,
    questionCode: ['let obj: { [K: string]: number; };'],
    questionText: '変数objに代入できるデータは以下のうちどれか？',
    options: {
      a: "{ 1: 'Hello' }",
      b: "{ 'Hello': 1 , 'Bye': 2 }",
      c: '{ arr[]: 1 }',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/index-signature',
  },
  {
    id: 34,
    questionCode: [],
    questionText: 'JavaScriptのオブジェクト生成はクラスベースかプロトタイプベースか？',
    options: { a: 'クラスベース', b: 'プロトタイプベース' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/prototype-based-programming',
  },
  {
    id: 35,
    questionCode: ['let a: object;'],
    questionText: '変数aに代入できないものを選んでください。',
    options: { a: '{ x: 1 }', b: '[1, 2, 3]', c: 'undefined', d: '/a-z/' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/difference-among-object-and-object',
  },
  {
    id: 36,
    questionCode: ['let a: {};'],
    questionText: 'tsconfig.jsonでstrictがtrueの場合、変数aに代入できないものを選んでください。',
    options: { a: 'a = true;', b: 'a = [];', c: 'a = undefined;' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/difference-among-object-and-object',
  },
  {
    id: 37,
    questionCode: ['const item = { a: 1, b: 2, c: 3 };'],
    questionText: 'オブジェクトitemのプロパティをまとめて変数として宣言する方法は？',
    options: {
      a: 'const { a, b, c } = item;',
      b: 'const { a, b, c } = { item.a, item.b, item.c }',
      c: 'const a, b, c = item;',
      d: 'const a, b, c = item(a, b, c);',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/destructuring-assignment-from-objects',
  },
  {
    id: 38,
    questionCode: [
      'const color = { r: 0, g: 1, b: 2, a: 3 };',
      'const { r: red, g: green, b: blue, a: alpha } = color;',
      'console.log(green);',
    ],
    questionText: 'この出力結果はなにか？',
    options: { a: '1', b: '""', c: '{}', d: 'undefined' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/destructuring-assignment-from-objects',
  },
  {
    id: 39,
    questionCode: [
      'const obj = { a: undefined, b: 111 };',
      'const { a = 0, b = 0 } = obj;',
      'console.log(a, b);',
    ],
    questionText: '出力結果は？',
    options: { a: '0, 0', b: '0, 111', c: 'undefined, 111', d: 'undefined, 0' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/destructuring-assignment-from-objects',
  },
  {
    id: 40,
    questionCode: [
      'const book = {title: "サバイバルTypeScript"};',
      'const title = book === null || book === undefined ? undefined : book.title;',
    ],
    questionText: '2行目と同じ動作のコードを選択してください。',
    options: {
      a: 'const title = book?.title;',
      b: 'const title = book.?title;',
      c: 'const title = if book === undefined || null else book.title;',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/optional-chaining',
  },
  {
    id: 41,
    questionCode: [
      'type AB = { a: string; b: string; }',
      'const a = "aaa";',
      'const b = "bbb";',
      'const ab : AB = { a, b };',
    ],
    questionText: '4行目でエラーは起きますか？',
    options: { a: '起きる', b: '起きない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/shorthand-property-names',
  },
  {
    id: 42,
    questionCode: [
      'const increment = (n) => n + 1;',
      'const result = increment();',
      'console.log(result);',
    ],
    questionText:
      '2行目のincrement関数にオプショナルチェーンをつけて、nullやundefinedのプロパティを誤って参照しないようにしてください。',
    options: {
      a: 'const result = increment?.(1);',
      b: 'const result = increment.?(1);',
      c: 'const result = increment?(1);',
      d: 'const result = increment.(1)?;',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/optional-chaining',
  },
  {
    id: 43,
    questionCode: ['const foo = { a: 1, b: 2, c: 3 };', 'console.log(Object.getPrototypeOf(foo));'],
    questionText: '何が出力されるか？',
    options: { a: 'Object', b: '{ a: 1, b: 2, c: 3 }', c: 'foo', d: '{}' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/how-to-loop-an-object',
  },
  {
    id: 44,
    questionCode: ['const foo = { a: 1, b: 2, c: 3 };', 'console.log(Object.keys(foo));'],
    questionText: '出力結果は？',
    options: { a: '[1,2,3]', b: '["a","b","c"]', c: '[["a",1],["b",2],["c", 3]]' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/object/how-to-loop-an-object',
  },
  {
    id: 45,
    questionCode: ['class Person { walk() {} }', 'class Dog { walk() {} }'],
    questionText: 'クラスPersonのインスタンスにDogのインスタンスは代入可能か？',
    options: { a: '代入可', b: '代入不可' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/structural-subtyping',
  },
  {
    id: 46,
    questionCode: [],
    questionText: 'number型だけが要素の配列を宣言する方法は？',
    options: {
      a: 'let array: number[];',
      b: 'let array[] :number;',
      c: 'let array: Array<T>;',
      d: 'let array[]: number[];',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/type-annotation-of-array',
  },
  {
    id: 47,
    questionCode: [
      'const list1 = [1, 2, 3];',
      'const list2 = [1, 2, 3];',
      'console.log(list1 == list2);',
    ],
    questionText: 'このコードの出力は？',
    options: { a: 'true', b: 'false' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/array-as-a-object',
  },
  {
    id: 48,
    questionCode: [
      'const arr = [1,2,3];',
      'const backup = arr;',
      'arr.push(4);',
      'console.log(backup);',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '[1,2,3]', b: '[1,2,3,4]', c: 'undefined', d: '[]' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/array-as-a-object',
  },
  {
    id: 49,
    questionCode: ['const abc = ["a", "b", "c"];', 'console.log(abc[100]);'],
    questionText: 'このコードの出力結果は？',
    options: { a: 'エラーが起こる', b: 'null', c: 'undefined' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/how-to-access-elements-in-an-array',
  },
  {
    id: 50,
    questionCode: ['const arr: number[] = [1, 2, 3];'],
    questionText: '配列arrを読み取り専用にしてください。',
    options: {
      a: 'const arr: number[] as Readonly = [1, 2, 3];',
      b: 'const arr: number[] readonly = [1, 2, 3];',
      c: 'const arr: readonly number[] = [1, 2, 3];',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/readonly-array',
  },
  {
    id: 51,
    questionCode: ['const arr = [1,2,3,4];', 'const [ , a, b, c] = arr;', 'console.log(a);'],
    questionText: 'このコードの出力結果は？',
    options: { a: '1', b: '2', c: '3', d: 'undefined' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/destructuring-assignment-from-array',
  },
  {
    id: 52,
    questionCode: ['const arr = [1,2,3,4];', 'const [ a, ...b] = arr;', 'console.log(b);'],
    questionText: 'このコードの出力結果は？',
    options: { a: '1', b: '4', c: '[1, 2, 3, 4]', d: '[2, 3, 4]' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/destructuring-assignment-from-array',
  },
  {
    id: 53,
    questionCode: [
      'const nums1 = [1, 2];',
      'const nums2 = [3, 4];',
      'const all = nums1.concat(nums2);',
      'console.log(nums1);',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '[1, 2]', b: '[3, 4]', c: '[1, 2, 3, 4]' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/array-operations',
  },
  {
    id: 54,
    questionCode: [
      'const arr = ["a", "b", "c"];',
      'arr.forEach((value, i) => {',
      '  console.log(value, i);',
      '});',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '0 1 2', b: 'a b c', c: 'a 0\nb 1\nc 2' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/how-to-loop-an-array',
  },
  {
    id: 55,
    questionCode: [
      'const arr = ["a", "b", "c"];',
      'const arr2 = arr.map((value) => value + value);',
      'console.log(arr2);',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '["aa", "bb", "cc"]',
      b: '["a+a","b+b", "c+c" ]',
      c: '{ "aa", "bb", "cc" }',
      d: '["a+a","b+b", "c+c" ]',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/how-to-loop-an-array',
  },
  {
    id: 56,
    questionCode: ['const arr = [1, 2, 3];', 'const arr2 = [0, ...arr, 4];'],
    questionText: 'arr2にはどんな値が入っているか？',
    options: { a: '[1, 2, 3]', b: '[1, 2, 3, 0, 4]', c: '[0, 1, 2, 3, 4]', d: '[0, 1, 4]' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/spread-syntax-for-array',
  },
  {
    id: 57,
    questionCode: [
      'const arr = [1, 2, 3];',
      'const backup = [...arr];',
      'arr.push(4);',
      'console.log(backup);',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '[1, 2, 3]', b: '[1, 2, 3, 4]', c: 'undefined', d: 'never' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/values-types-variables/array/spread-syntax-for-array',
  },
  {
    id: 58,
    questionCode: ['function getTuple() {', '  return [42, "hello", false];', '}'],
    questionText: '戻り値の型は？',
    options: { a: 'any[]', b: '[number, string, boolean]', c: 'unknown[]', d: 'Array<any>' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/tuple',
  },
  {
    id: 59,
    questionCode: ['const data: [number, string, boolean] = [10, "ok", true];'],
    questionText: '変数dataを使ったコードのうち、エラーになるのは？',
    options: {
      a: 'console.log(data[0].toExponential());',
      b: 'console.log(data[1].length);',
      c: 'console.log(data[2].valueOf());',
      d: 'console.log(data[3]);',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/values-types-variables/tuple',
  },
  {
    id: 60,
    questionCode: ['enum Position {', '  Top,', '  Right,', '  Bottom,', '  Left', '}'],
    questionText: 'Position.Rightの値はどれか？',
    options: { a: '"Right"', b: 'b', c: '1', d: '2' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/enum/numeric-enum',
  },
  {
    id: 61,
    questionCode: ['let a: number | undefined;'],
    questionText: '変数aに代入してはいけない値は何か？',
    options: { a: '100', b: 'undefined', c: 'any' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/union',
  },
  {
    id: 62,
    questionCode: ['type X = string & number;', 'let value: X = "Hello";'],
    questionText: 'このコードについて正しい説明はどれ？',
    options: {
      a: 'HelloがXに代入され、正常に動作する',
      b: 'Xはstringかnumberのどちらかを持つ型である',
      c: 'Xはnever型になり、エラーになる',
      d: 'Xはstringもnumberも受け付けるため、問題なくコンパイルできる',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/intersection',
  },
  {
    id: 63,
    questionCode: ['const num = 123;', 'const str: string = num as string;'],
    questionText: 'コードをコンパイルすると、どのような結果になるか？',
    options: {
      a: 'num を string に変換できるので、正常に動作する',
      b: 'num は string にアサーションできないため、コンパイルエラーになる',
      c: 'num は string にアサーションできるが、実行時エラーになる',
      d: 'as は型の変換を行うので、num は "123" になる',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/type-assertion-as',
  },
  {
    id: 64,
    questionCode: ['console.log(typeof Symbol());'],
    questionText: 'このコードの出力結果は？',
    options: { a: 'undefined', b: 'Symbol', c: 'function', d: 'object' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/values-types-variables/typeof-operator',
  },
  {
    id: 65,
    questionCode: [
      'const array = [null, 3, 0, null, 1, 2];',
      'console.log(array.filter((n) => n));',
    ],
    questionText: '何が出力されるか？',
    options: { a: '[null, 3, 0, null, 1, 2]', b: '[3, 0, 1, 2]', c: '[3, 1, 2]' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/values-types-variables/truthy-falsy-values',
  },
  {
    id: 66,
    questionCode: [
      'if (true) {',
      '  var a = 10;',
      '  let b = 20;',
      '}',
      'console.log(a);',
      'console.log(b);',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '10 と 20 が出力される',
      b: '10 が出力され、 b に対する ReferenceError が発生する',
      c: 'a に対する ReferenceError が発生し、 b も ReferenceError になる',
      d: 'undefined と 20 が出力される',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/variable-scope',
  },
  {
    id: 67,
    questionCode: ['const result = 10 > 5 ? "greater" : "smaller";', 'console.log(result);'],
    questionText: 'このコードの出力結果は？',
    options: { a: '"greater"', b: '"smaller"', c: 'true', d: 'false' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/statements/ternary-operator',
  },
  {
    id: 68,
    questionCode: [
      'const arr = ["a", "b", "c"];',
      'for (const item of arr) {',
      '  console.log(item);',
      '}',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '"a" "b" "c"', b: '["a", "b", "c"]', c: 'undefined' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/statements/for-of',
  },
  {
    id: 69,
    questionCode: [
      'const value = "B";',
      'switch (value) {',
      '  case "A": console.log("A");',
      '  case "B": console.log("B");',
      '  case "C": console.log("C");',
      '}',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '"A"', b: '"B"', c: '"B" "C"', d: 'エラー' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/statements/switch-fallthrough',
  },
  {
    id: 70,
    questionCode: [
      'const num = 1;',
      'switch (num) {',
      '  case 1: console.log("One");',
      '  case 2: console.log("Two");',
      '}',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '"One"', b: '"One" "Two"', c: '"Two"', d: 'エラー' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/switch-fallthrough',
  },
  {
    id: 71,
    questionCode: ['try {', '  throw "Error!";', '} catch (e) {', '  console.log(e);', '}'],
    questionText: 'このコードの出力結果は？',
    options: { a: '"Error!"', b: 'エラー発生', c: 'undefined', d: 'コンパイルエラー' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/statements/exception',
  },
  {
    id: 72,
    questionCode: ['const any: any = 1;', 'const foo: never = any;'],
    questionText: 'any型はnever型に代入できる？',
    options: { a: '代入できる', b: '代入できない' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/never',
  },
  {
    id: 73,
    questionCode: [
      'function isString(value: unknown): value is string {',
      '  return typeof value === "string";',
      '}',
    ],
    questionText: '関数 isString の説明で正しいのは？',
    options: {
      a: 'value が string 型かどうかをチェックする',
      b: 'value を string に変換する',
      c: 'value を any に変換する',
      d: 'value を unknown に変換する',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/statements/control-flow-analysis-and-type-guard',
  },
  {
    id: 74,
    questionCode: ['let x: unknown = "hello";', 'x.toUpperCase();'],
    questionText: 'このコードの実行結果は？',
    options: { a: '"HELLO"', b: 'エラー', c: 'undefined', d: 'hello' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/unknown',
  },
  {
    id: 75,
    questionCode: [
      'let a: any = "hello";',
      'let b: unknown = "hello";',
      'a.toUpperCase(); // OK',
      'b.toUpperCase(); // ?',
    ],
    questionText: 'b.toUpperCase() の実行結果は？',
    options: { a: 'HELLO', b: 'コンパイルエラー', c: 'undefined', d: '実行時エラー' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/any-vs-unknown',
  },
  {
    id: 76,
    questionCode: ['const obj: any = { a:10 };', 'console.log(obj.b)'],
    questionText: 'このコードの出力結果は？',
    options: { a: '10', b: 'undefined', c: 'ReferenceError', d: 'null' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/statements/any-vs-unknown',
  },
  {
    id: 77,
    questionCode: ['const point = { x: 135, y: 35 };'],
    questionText: '変数pointから型を定義する方法は？',
    options: {
      a: 'type p = type(point);',
      b: 'type p = type point',
      c: 'type p = typeof point;',
      d: 'type p = keyof point;',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/type-reuse/typeof-type-operator',
  },
  {
    id: 78,
    questionCode: [
      'type xyz = {',
      '  x: string;',
      '  y: number;',
      '  z: number;',
      '};',
      'type xyzKey = keyof xyz;',
    ],
    questionText: '型xyzの値は？',
    options: {
      a: '["x", "y", "z"]',
      b: '{x: string, y: number, z: number}',
      c: '[string, number, number]',
      d: '"x" | "y" | "z"',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/keyof-type-operator',
  },
  {
    id: 79,
    questionCode: [],
    questionText: '全プロパティを必須にするユーティリティ型は？',
    options: { a: 'Required<T>', b: 'Readonly<T>', c: 'Partial<T>', d: 'NonInfer<T>' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/required',
  },
  {
    id: 80,
    questionCode: [],
    questionText: '全プロパティを読み取り専用にするユーティリティ型は？',
    options: { a: 'Required<T>', b: 'Readonly<T>', c: 'Partial<T>', d: 'NonInfer<T>' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/readonly',
  },
  {
    id: 81,
    questionCode: [],
    questionText: '全プロパティをオプショナルにするユーティリティ型は？',
    options: { a: 'Required<T>', b: 'Readonly<T>', c: 'Partial<T>', d: 'NonInfer<T>' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/partial',
  },
  {
    id: 82,
    questionCode: [],
    questionText: '型推論を防ぐためのユーティリティ型は？',
    options: { a: 'Required<T>', b: 'Readonly<T>', c: 'Partial<T>', d: 'NonInfer<T>' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/no-infer',
  },
  {
    id: 83,
    questionCode: [],
    questionText: 'Keyの型を指定したオブジェクト型を定義できるユーティリティ型は？',
    options: { a: 'Record<Keys, Type>', b: 'NonNullable<T>', c: 'ReturnType<T>', d: 'Awaited<T>' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/record',
  },
  {
    id: 84,
    questionCode: [],
    questionText: 'nullとundefinedを除外するユーティリティ型は？',
    options: { a: 'Record<Keys, Type>', b: 'NonNullable<T>', c: 'ReturnType<T>', d: 'Awaited<T>' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/nonnullable',
  },
  {
    id: 85,
    questionCode: [],
    questionText: '関数の戻り値の型を取得するユーティリティ型は？',
    options: { a: 'Record<Keys, Type>', b: 'NonNullable<T>', c: 'ReturnType<T>', d: 'Awaited<T>' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/return-type',
  },
  {
    id: 86,
    questionCode: [],
    questionText: 'Promiseの解決値の型を取得するユーティリティ型は？',
    options: { a: 'Record<Keys, Type>', b: 'NonNullable<T>', c: 'ReturnType<T>', d: 'Awaited<T>' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/awaited',
  },
  {
    id: 87,
    questionCode: [],
    questionText: '任意のプロパティだけを持つオブジェクト型を作るユーティリティ型は？',
    options: { a: 'Pick<T,Keys>', b: 'Omit<T, Keys>', c: 'Exclude<T, U>', d: 'Extract<T,U>' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/pick',
  },
  {
    id: 88,
    questionCode: [],
    questionText: '任意のプロパティを除いたオブジェクト型を作るユーティリティ型は？',
    options: { a: 'Pick<T,Keys>', b: 'Omit<T, Keys>', c: 'Exclude<T, U>', d: 'Extract<T,U>' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/omit',
  },
  {
    id: 89,
    questionCode: [],
    questionText: '既存の型から任意の型を除外するユーティリティ型は？',
    options: { a: 'Pick<T,Keys>', b: 'Omit<T, Keys>', c: 'Exclude<T, U>', d: 'Extract<T,U>' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/exclude',
  },
  {
    id: 90,
    questionCode: [],
    questionText: '既存の型から任意の型だけ抽出するユーティリティ型は？',
    options: { a: 'Pick<T,Keys>', b: 'Omit<T, Keys>', c: 'Exclude<T, U>', d: 'Extract<T,U>' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/utility-types/extract',
  },
  {
    id: 91,
    questionCode: ['type A = "a" | "b" | "c";', 'type B = {', '  [key in A]: string;', '};'],
    questionText: '型Bで宣言できる変数は？',
    options: {
      a: 'const a: B = "a" | "b" | "c";',
      b: 'const a: B = ["a", "b", "c"];',
      c: 'const a: B = { a: "a", b: "b" };',
      d: 'const a: B = { a: "a", b: "b", c: "c" };',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/mapped-types',
  },
  {
    id: 92,
    questionCode: ['type Foo = { a: number; b: string; c: boolean };', 'type T = Foo[keyof Foo];'],
    questionText: '型Tと同じ型は？',
    options: {
      a: '["a", "b", "c"]',
      b: '[number, string, boolean]',
      c: '{a: number, b: string, c: boolean}',
      d: 'number | string | boolean',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/indexed-access-types',
  },
  {
    id: 93,
    questionCode: [
      'type Status = ["success", "error", "loading"];',
      'type StatusType = Status[number];',
    ],
    questionText: 'StatusTypeの型は？',
    options: {
      a: 'string',
      b: 'string[]',
      c: '[string, string, string]',
      d: '"success" | "error" | "loading"',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/indexed-access-types',
  },
  {
    id: 94,
    questionCode: [
      'type IsString<T> = T extends string ? "YES" : "NO";',
      'type Test = IsString<number>;',
    ],
    questionText: '型Testはどのような型？',
    options: { a: 'string', b: 'number', c: '"YES"', d: '"NO"' },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/type-reuse/conditional-types',
  },
  {
    id: 95,
    questionCode: [
      'Promise.reject("Error!")',
      '  .catch((err) => {',
      '    console.log(err);',
      '  })',
      '  .then(() => {',
      '    console.log("Recovered");',
      '  });',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '"Error!"',
      b: '"Error!" "Recovered"',
      c: '"Recovered"',
      d: '何も表示されない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/asynchronous/promise',
  },
  {
    id: 96,
    questionCode: [
      'console.log(1);',
      'Promise.resolve().then(() => console.log(2));',
      'console.log(3);',
    ],
    questionText: 'このコードの出力結果は？',
    options: { a: '1 2 3', b: '1 3 2', c: '2 1 3', d: '3 1 2' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/asynchronous/promise',
  },
  {
    id: 97,
    questionCode: [],
    questionText: '次のうち、Promiseの状態として存在しないものはどれ？',
    options: { a: 'pending', b: 'resolved', c: 'fulfilled', d: 'rejected' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/asynchronous/promise',
  },
  {
    id: 98,
    questionCode: [
      'const names = ["Yamamoto", "Matsumoto", "Sato"];',
      'const nameLengths = names.map_____;',
    ],
    questionText: '各名前の長さを取得したい場合、2行目の適切な記述は？。',
    options: {
      a: 'names.map<string>(name => name.length);',
      b: 'names.map<number>(name => name.length);',
      c: 'names.map<boolean>(name => name.length);',
      d: 'names.map<Array<number>>(name => name.length);',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/generics/built-in-libraries-using-generics',
  },
  {
    id: 99,
    questionCode: ['function identity<???>(value: ???): ??? {', '  return value;', '}'],
    questionText: '関数 identity で、正しい型変数の使い方はどれ？',
    options: {
      a: 'function identity<T>(value: T): T',
      b: 'function identity<U>(value: U): T',
      c: 'function identity<X>(value: X): number',
      d: 'function identity(value: T): T',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/generics/type-variables',
  },
  {
    id: 100,
    questionCode: [
      'function red<T>(element: T) {',
      '  element.style.backgroundColor = "red";',
      '}',
    ],
    questionText: 'この関数に適切な型制約をつけるには？',
    options: {
      a: 'T extends HTMLElement',
      b: 'T extends object',
      c: 'T extends any',
      d: 'T & HTMLElement',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/generics/type-parameter-constraint',
  },
  {
    id: 101,
    questionCode: [
      'type FilterString<T> = T extends string ? T : never;',
      'type Result = FilterString<string | number | boolean>;',
    ],
    questionText: '型Resultの型は？',
    options: { a: 'string', b: 'never', c: 'string | number | boolean', d: 'undefined' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/type-reuse/conditional-types',
  },
  {
    id: 102,
    questionCode: [
      'type ElementType<T> = T extends (infer U)[] ? U : never;',
      'type T = ElementType<string[]>;',
    ],
    questionText: '型Tの値は？',
    options: { a: 'string', b: 'string[]', c: 'never', d: 'infer' },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/type-reuse/conditional-types',
  },
  {
    id: 103,
    questionCode: [
      'interface Serializable<T extends string | number = ???> {',
      '  value: T;',
      '  toString(): string;',
      '}',
    ],
    questionText:
      'デフォルト値を指定するのに、Serializable インターフェースの定義で、正しいものはどれか？',
    options: { a: 'bigint', b: 'number', c: 'boolean', d: 'object' },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/generics/default-type-parameter#%E5%9E%8B%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%B6%E7%B4%84%E3%81%A8%E4%BD%B5%E7%94%A8%E3%81%99%E3%82%8B',
  },
  {
    id: 104,
    questionCode: [],
    questionText: '共変性（Covariance）とは何か？',
    options: {
      a: '親の型を子の型として扱える',
      b: '子の型を親の型として扱える',
      c: 'どちらの型も変更できない',
      d: 'どちらの型も自由に変更できる',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/generics/variance',
  },
  {
    id: 105,
    questionCode: [
      'type Wrapper<T> = { value: T; };',
      'type IsString<T> = T extends string ? true : false;',
      'type A = IsString<string | number>;',
    ],
    questionText: '型Aの値は？',
    options: { a: 'string', b: 'number', c: 'boolean', d: 'string | false' },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/type-reuse/union-distribution',
  },
  {
    id: 106,
    questionCode: ['function increment(num): number {', '  return num + 1;', '}'],
    questionText: '引数numの型は？',
    options: {
      a: 'number',
      b: 'string',
      c: 'any',
      d: 'undefind',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/function-declaration',
  },
  {
    id: 107,
    questionCode: [
      'function getFirst(items: number[]) {',
      '  if (typeof items[0] === "number") {',
      '    return items[0];',
      '  }',
      '  return null;',
      '}',
    ],
    questionText: '関数getFirst()の型は？',
    options: {
      a: 'number',
      b: 'null',
      c: 'number | null',
      d: 'number[]',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/function-declaration',
  },
  {
    id: 108,
    questionCode: ['const func = function () {};'],
    questionText: 'このコードのように関数名を省略可能か？',
    options: {
      a: '省略可',
      b: '省略不可',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/function-expression#%E9%96%A2%E6%95%B0%E5%90%8D%E3%81%AE%E7%9C%81%E7%95%A5',
  },
  {
    id: 109,
    questionCode: ['const increment = n: number => n + 1;', 'console.log(increment(1));'],
    questionText: 'このコードではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/arrow-functions#%E3%82%A2%E3%83%AD%E3%83%BC%E9%96%A2%E6%95%B0%E3%81%AE%E7%9C%81%E7%95%A5%E5%BD%A2',
  },
  {
    id: 110,
    questionCode: ['const increment = n: number => { foo: n+1 };', 'console.log(increment(1));'],
    questionText: 'このコードではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/arrow-functions#%E3%82%A2%E3%83%AD%E3%83%BC%E9%96%A2%E6%95%B0%E3%81%AE%E7%9C%81%E7%95%A5%E5%BD%A2',
  },
  {
    id: 111,
    questionCode: [
      'type Increment = (num: number) => number;',
      'const f: Increment = (num) => num + 1;',
    ],
    questionText: '関数fの宣言時にエラーは起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-type-declaration#%E9%96%A2%E6%95%B0%E5%AE%9F%E8%A3%85%E3%81%AE%E5%9E%8B%E6%B3%A8%E9%87%88%E3%81%AE%E7%9C%81%E7%95%A5',
  },
  {
    id: 112,
    questionCode: ['hello();', 'function hello(): void {', '  console.log("Hello World");', '}'],
    questionText: 'このコードの実行結果は？',
    options: {
      a: 'Hello World',
      b: 'エラー',
      c: 'undefind',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/function-declaration-and-hoisting',
  },
  {
    id: 113,
    questionCode: [
      'hello();',
      '',
      'const hello = function () {',
      '  console.log("Hello World");',
      '};',
    ],
    questionText: 'このコードの実行結果は？',
    options: {
      a: 'Hello World',
      b: 'エラー',
      c: 'undefind',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-declaration-and-hoisting',
  },
  {
    id: 114,
    questionCode: ['function showThis() {', '  console.log(this);', '}', 'showThis()'],
    questionText: 'Javascriptにおいて、このコード実行結果は？',
    options: {
      a: 'this',
      b: 'undefind',
      c: 'エラー',
      d: 'Window',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/functions/function-expression-vs-arrow-functions#this%E3%81%AE%E6%8C%87%E3%81%99%E3%82%82%E3%81%AE',
  },
  {
    id: 115,
    questionCode: [
      'function foo() {',
      '  console.log("1つ目の関数");',
      '}',
      'function foo() {',
      '  console.log("2つ目の関数");',
      '}',
      'foo();',
    ],
    questionText: 'このコードの実行結果は？',
    options: {
      a: '1つ目の関数',
      b: '2つ目の関数',
      c: 'エラー',
      d: 'never',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-expression-vs-arrow-functions#%E9%96%A2%E6%95%B0%E5%90%8D%E3%81%AE%E9%87%8D%E8%A4%87',
  },
  {
    id: 116,
    questionCode: [
      'let foo  = () => {console.log("1つ目の関数")};',
      'let foo  = () => {console.log("2つ目の関数")};',
      'foo();',
    ],
    questionText: 'このコードの実行結果は？',
    options: {
      a: '1つ目の関数',
      b: '2つ目の関数',
      c: 'エラー',
      d: 'never',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/function-expression-vs-arrow-functions#%E9%96%A2%E6%95%B0%E5%90%8D%E3%81%AE%E9%87%8D%E8%A4%87',
  },
  {
    id: 117,
    questionCode: [
      'function hello() {',
      '  return "Hello World";',
      '}',
      'const helloWorld = hello;',
      'console.log(helloWorld());',
    ],
    questionText: 'このコードではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-is-a-value',
  },
  {
    id: 118,
    questionCode: ['function hello() {', '  return "Hello World";', '}', 'hello.prop = 123;'],
    questionText: 'このコードではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-is-a-value',
  },
  {
    id: 119,
    questionCode: ['function fn(): undefind {}'],
    questionText: 'この関数宣言ではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/void-type#undefined%E5%9E%8B%E3%81%A8void%E5%9E%8B%E3%81%AE%E9%81%95%E3%81%84',
  },
  {
    id: 120,
    questionCode: ['function fn(): void {}'],
    questionText: 'この関数宣言ではエラーが起きる？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/void-type#undefined%E5%9E%8B%E3%81%A8void%E5%9E%8B%E3%81%AE%E9%81%95%E3%81%84',
  },
  {
    id: 121,
    questionCode: ['const v: void = undefined;', 'const u: undefined = v;'],
    questionText: 'エラーが起きるのは1行目と2行目のどちら？',
    options: {
      a: '1行目',
      b: '2行目',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/void-type#void%E3%81%AFundefined%E3%81%AE%E4%B8%8A%E4%BD%8D%E5%9E%8B',
  },
  {
    id: 122,
    questionCode: [],
    questionText: 'Typescriptで関数の引数に型注釈をつけなかった場合、エラーが起きるか？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/function-parameters#%E5%BC%95%E6%95%B0%E3%81%AE%E5%9E%8B',
  },
  {
    id: 123,
    questionCode: [],
    questionText: 'Javascriptの関数の引数は、基本的に値渡しか参照渡しか？',
    options: {
      a: '値渡し',
      b: '参照渡し',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/pass-by-value',
  },
  {
    id: 124,
    questionCode: [],
    questionText: 'Javascriptのオブジェクトは値渡しか参照渡しか？',
    options: {
      a: '値渡し',
      b: '参照渡し',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/pass-by-value',
  },
  {
    id: 125,
    questionCode: ['function hello(person?: string) {', '  console.log(person);', '}', 'hello();'],
    questionText: 'このコードの実行結果は？',
    options: {
      a: 'エラー',
      b: 'person',
      c: 'undefind',
      d: 'null',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/optional-parameters#%E7%9C%81%E7%95%A5%E3%81%99%E3%82%8B%E3%81%A8undefined%E3%81%AB%E3%81%AA%E3%82%8B',
  },
  {
    id: 126,
    questionCode: ['function hello(person?: string) {}'],
    questionText: '関数helloの引数の型は？',
    options: {
      a: 'string',
      b: 'object',
      c: 'undefind',
      d: 'string | undefind',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/functions/optional-parameters#%E7%9C%81%E7%95%A5%E3%81%99%E3%82%8B%E3%81%A8undefined%E3%81%AB%E3%81%AA%E3%82%8B',
  },
  {
    id: 127,
    questionCode: ['function hello(person: string | undefined) {}', 'hello();'],
    questionText: '関数hello呼び出し時にエラーが起きるか？',
    options: {
      a: 'エラーが起きる',
      b: 'エラーが起きない',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/optional-parameters#t--undefined%E3%81%A8%E3%81%AE%E9%81%95%E3%81%84',
  },
  {
    id: 128,
    questionCode: ['function foo(x = 1) {', '  console.log(x);', '}', 'foo();'],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '1',
      b: 'undefind',
      c: 'エラー',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/default-parameters',
  },
  {
    id: 129,
    questionCode: [
      'function func(param1, ...params) {',
      '  console.log(param1, params);',
      '}',
      'func(1, 2, 3);',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '1, 2',
      b: '[1, 2, 3]',
      c: '1, [2, 3]',
      d: '[1, [2, 3]]',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/default-parameters',
  },
  {
    id: 130,
    questionCode: [
      'function foo({ a, c }) {',
      '  console.log(a, c);',
      '}',
      'foo({ a: 1, b: 2, c: 3 });',
    ],
    questionText: 'Javascriptにおいて、コードの実行結果は？',
    options: {
      a: 'エラー',
      b: '1, 2',
      c: '1, 3',
      d: '1, undefind',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/reference/functions/destructuring-assignment-parameters',
  },
  {
    id: 131,
    questionCode: [
      'function isNumber(x: unknown): x is number {',
      '  return typeof x === "number";',
      '}',
    ],
    questionText: '関数isNumberは型ガード関数として機能しますか？',
    options: {
      a: '機能する',
      b: '機能しない',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/type-guard-functions',
  },
  {
    id: 132,
    questionCode: [
      'function isNumber(x: unknown): boolean {',
      '  return typeof x === "number";',
      '}',
    ],
    questionText: '関数isNumberは型ガード関数として機能しますか？',
    options: {
      a: '機能する',
      b: '機能しない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/type-guard-functions',
  },
  {
    id: 133,
    questionCode: [
      'function isDuck(animal: Animal): asserts animal is Duck {',
      '  if (walksLikeDuck(animal) && quacksLikeDuck(animal)) {',
      '      return;',
      '  }',
      '  throw new Error("YOU ARE A FROG!!!");',
      '}',
    ],
    questionText: '関数isDuckの用途は？',
    options: {
      a: 'isDuck を実行すると、animal が Duck 型に変換される',
      b: 'isDuck を通過した場合、animal は Duck 型として扱える',
      c: 'isDuck の戻り値は boolean 型である',
      d: 'isDuck は animal を Frog 型に変換する',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/assertion-functions',
  },
  {
    id: 134,
    questionCode: [
      'const result = ((type: string) => {',
      '  if (type === "Apple") {',
      '    return "林檎";',
      '  } else if (type === "Orange") {',
      '    return "オレンジ";',
      '  } else {',
      '    return "謎の果物";',
      '  }',
      '})(fruit.type);',
    ],
    questionText: 'このコードの動作説明として正しいのは？',
    options: {
      a: 'result は fruit.type の値に応じて "林檎", "オレンジ", または "謎の果物" になる',
      b: 'このコードはエラーになる。関数は fruit.type を引数に取っていないから',
      c: 'result には undefined が格納される可能性がある',
      d: 'このコードは fruit オブジェクトを変更する',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/functions/iife',
  },
  {
    id: 135,
    questionCode: [
      'function greetNewUser(func: (name: string) => string) {',
      '  console.log(func("ご新規"));',
      '}',
    ],
    questionText: '関数greetNewUserの引数funcのことを何と呼ぶ？',
    options: {
      a: '即時実行関数',
      b: '無名関数',
      c: '引数関数',
      d: 'コールバック関数',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/reference/functions/callback-functions',
  },
  {
    id: 136,
    questionCode: [],
    questionText: 'typescriptではオーバーロード関数として、関数のシグネチャごとに実装を分けるか？',
    options: {
      a: '分ける',
      b: '分けない',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/functions/overload-functions',
  },
  {
    id: 137,
    questionCode: [
      '// math.ts',
      'export function add(a: number, b: number) {',
      '  return a + b;',
      '}',
      'export function multiply(a: number, b: number) {',
      '  return a * b;',
      '}',
    ],
    questionText: 'ほかのファイルで2つの関数をインポートする際の正しい記法は？',
    options: {
      a: 'import add, multiply from "./math";',
      b: 'import { add, multiply } from "./math";',
      c: 'import * from "./math";',
      d: 'import math from "./math";',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/reference/import-export-require#export',
  },
  {
    id: 138,
    questionCode: [],
    questionText: 'CommonJSで用いられるインポート/エクスポートの方法は？',
    options: {
      a: 'require() / module.exports',
      b: 'import / export',
    },
    answer: 'a',
    link: 'https://typescriptbook.jp/reference/import-export-require#commonjs',
  },
  {
    id: 139,
    questionCode: [
      'const obj = { a: 1, b: { c: 2 } };',
      'const copy = { ...obj };',
      'copy.b.c = 200;',
      'console.log(obj.b.c);',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '1',
      b: '2',
      c: '200',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/tips/shallow-copy-object',
  },
  {
    id: 140,
    questionCode: [
      'const obj1 = {a: 1}',
      'const obj2 = {a: 2, b: 3}',
      'const merged = {...obj1, …obj2};',
      'console.log(merged);',
    ],
    questionText: 'このコードの出力結果は？',
    options: {
      a: '{obj1 : {a: 1}, obj2: {a:2, b:3}}',
      b: '{a:1, b: 3}',
      c: '{a:2, b: 3}',
    },
    answer: 'c',
    link: 'https://typescriptbook.jp/tips/merge-objects',
  },
  {
    id: 141,
    questionCode: ['const colors = ["red", "green", "blue"] as const;'],
    questionText: '変数colorsの型はどれ？',
    options: {
      a: 'string[]',
      b: 'readonly string[]',
      c: '(“red” |  “green” | “blue”)[]',
      d: '[“red”, “green”, “blue”]',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/tips/generates-type-from-array',
  },
  {
    id: 142,
    questionCode: ['const user = {', '  name : “taro”,', '  age : 20', '} as const;'],
    questionText: '変数userの型はどれ？',
    options: {
      a: 'object',
      b: '{name: string, age: number}',
      c: '{name: “taro”, age: 20}',
      d: '{readonly name: “taro”, readonly age: 20}',
    },
    answer: 'd',
    link: 'https://typescriptbook.jp/tips/generates-type-from-object#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%AE%9A%E6%95%B0%E5%80%A4%E3%81%A7%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88',
  },
  {
    id: 143,
    questionCode: [
      'const conf = {',
      '  en: "Are you sure?",',
      '  ja: "よろしいですか？"',
      '};',
      'type Language = keyof conf;',
    ],
    questionText: '型Languageの値はどれ？',
    options: {
      a: 'object',
      b: '“en” | “ja”',
      c: '{  en: string, ja: string }',
      d: '{  en: "Are you sure?",  ja: "よろしいですか？" }',
    },
    answer: 'b',
    link: 'https://typescriptbook.jp/tips/generates-type-from-object-key#keyof',
  },
];
